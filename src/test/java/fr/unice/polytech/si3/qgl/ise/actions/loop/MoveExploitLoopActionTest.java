package fr.unice.polytech.si3.qgl.ise.actions.loop;

import fr.unice.polytech.si3.qgl.ise.CraftedContract;
import fr.unice.polytech.si3.qgl.ise.RawContract;
import fr.unice.polytech.si3.qgl.ise.actions.simple.FlyAction;
import fr.unice.polytech.si3.qgl.ise.actions.simple.ScanAction;
import fr.unice.polytech.si3.qgl.ise.entities.Crew;
import fr.unice.polytech.si3.qgl.ise.entities.Drone;
import fr.unice.polytech.si3.qgl.ise.enums.DroneEnums;
import fr.unice.polytech.si3.qgl.ise.enums.RawResource;
import fr.unice.polytech.si3.qgl.ise.map.Coordinates;
import fr.unice.polytech.si3.qgl.ise.map.IslandMap;
import fr.unice.polytech.si3.qgl.ise.parsing.Scan;
import org.json.JSONObject;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class MoveExploitLoopActionTest {

    private Crew crew;
    private MoveExploitLoopAction moveExploitLoopAction;

    @Before
    public void setup() {
        IslandMap map = new IslandMap();
        map.addCreek(new Coordinates(0, 0), "idDepart");

        List<RawContract> rawContracts = new ArrayList<>();
        List<CraftedContract> craftedContracts = new ArrayList<>();

        rawContracts.add(new RawContract(RawResource.WOOD, 500));
        rawContracts.add(new RawContract(RawResource.QUARTZ, 20));
        crew = new Crew(map, rawContracts, craftedContracts);
        crew.setIdCreek("idDepart");
        crew.setCoordinates(new Coordinates(0, 0));
        crew.setCurrentResource(RawResource.WOOD);
        moveExploitLoopAction = new MoveExploitLoopAction(crew);

        crew.getMap().setShip(new Coordinates(0, 0));
    }

    @Test
    public void ifNothingScannedStop() {
        String res = moveExploitLoopAction.apply();
        assertEquals("{\"action\":\"stop\"}", res);
    }

    @Test
    public void moveIfScannedTile() {
        scanDrone(0);
        String res = moveExploitLoopAction.apply();
        JSONObject json = new JSONObject(res);
        assertEquals("move_to", json.getString("action"));
        res = moveExploitLoopAction.apply();
        assertEquals("{\"action\":\"explore\"}", res);
    }

    @Test
    public void stillMovesIfNoFocusResource() {
        scanDrone(1);
        String res = moveExploitLoopAction.apply();
        JSONObject json = new JSONObject(res);
        assertEquals("move_to", json.getString("action"));
        res = moveExploitLoopAction.apply();
        assertEquals("{\"action\":\"explore\"}", res);
    }

    @Test
    public void stopIfFinishedContract() {
        crew.addToStock(RawResource.QUARTZ, 50);
        crew.tryToFinishContracts();
        crew.addToStock(RawResource.WOOD, 500);
        String res = moveExploitLoopAction.apply();
        assertEquals("{\"action\":\"stop\"}", res);
    }

    @Test
    public void switchFocusIfContractDone() {
        scanDrone(0);
        crew.addToStock(RawResource.WOOD, 500);
        String res = moveExploitLoopAction.apply();
        JSONObject json = new JSONObject(res);
        assertEquals("move_to", json.getString("action"));
        assertEquals(1, crew.getRawContracts().size());
    }

    @Test
    public void moveAfterExploit() {
        scanDrone(1);
        String res = moveExploitLoopAction.apply();
        JSONObject json = new JSONObject(res);
        assertEquals("move_to", json.getString("action"));
        moveExploitLoopAction.apply();
        moveExploitLoopAction.acknowledgeResults("{\"cost\":5,\"extras\":{\"resources\":[{\"amount\":\"HIGH\",\"resource\":\"WOOD\",\"cond\":\"FAIR\" }],\"pois\": [{\"kind\":\"Creek\",\"id\":\"idcreek\"}]},\"status\":\"OK\"}\"");
        res = moveExploitLoopAction.apply();
        assertEquals("{\"action\":\"exploit\",\"parameters\":{\"resource\":\"WOOD\"}}", res);
        res = moveExploitLoopAction.apply();
        json = new JSONObject(res);
        assertEquals("move_to", json.getString("action"));
    }

    private void scanDrone(int x) {
        Drone drone = new Drone(crew.getMap(), DroneEnums.NSEW.NORTH);
        FlyAction flyAction = new FlyAction(drone);
        flyAction.apply();
        ScanAction scanAction = new ScanAction(drone);
        scanAction.apply();
        switch (x) {
            case 1:
                drone.acknowledgeScan(new Scan("{\"cost\":2,\"extras\":{\"biomes\":[\"LAKE\",\"BEACH\"],\"creeks\":[],\"sites\":[]},\"status\":\"OK\"}"));

            default:
                drone.acknowledgeScan(new Scan("{\"cost\":2,\"extras\":{\"biomes\":[\"TROPICAL_RAIN_FOREST\",\"BEACH\"],\"creeks\":[],\"sites\":[]},\"status\":\"OK\"}"));
        }
    }
}
