package fr.unice.polytech.si3.qgl.ise.actions.loop;

import fr.unice.polytech.si3.qgl.ise.RawContract;
import fr.unice.polytech.si3.qgl.ise.actions.CrewAction;
import fr.unice.polytech.si3.qgl.ise.actions.StopAction;
import fr.unice.polytech.si3.qgl.ise.actions.crew.ExploitTile;
import fr.unice.polytech.si3.qgl.ise.actions.crew.MoveTo;
import fr.unice.polytech.si3.qgl.ise.actions.crew.Transform;
import fr.unice.polytech.si3.qgl.ise.entities.Crew;
import fr.unice.polytech.si3.qgl.ise.enums.RawResource;
import fr.unice.polytech.si3.qgl.ise.map.Coordinates;
import fr.unice.polytech.si3.qgl.ise.map.PathFinder;

import java.util.EnumMap;
import java.util.Map;
import java.util.Optional;

import static fr.unice.polytech.si3.qgl.ise.actions.loop.MoveExploitLoopAction.Step.*;

public class MoveExploitLoopAction extends CrewAction {

    private final ExploitTile exploitTile;
    private RawResource currentResource;
    private MoveTo moveTo;
    private Transform transform;
    private CrewAction currentAction;
    private Step currentStep;

    public MoveExploitLoopAction(Crew crewToUpdate) {
        super(crewToUpdate);
        currentStep = NEXT_TILE;
        currentAction = null;
        currentResource = crewToUpdate.getCurrentResource();
        exploitTile = new ExploitTile(crewToUpdate, crewToUpdate.getCurrentResource());
    }

    @Override
    public String apply() {
        currentAction = null;
        String res = null;
        Step nextStep;

        Map<RawResource, Double> toCraft = getCrewToUpdate().tryCrafting();
        if (toCraft != null) {
            Map<RawResource, Integer> crafting = new EnumMap<>(RawResource.class);
            for (RawResource rawResource : toCraft.keySet()) {
                int quantity = toCraft.get(rawResource).intValue();
                crafting.put(rawResource, quantity);
            }
            transform = new Transform(getCrewToUpdate(), crafting);
            res = transform.apply();
            currentAction = transform;
            return res;
        }

        getCrewToUpdate().tryToFinishContracts();

        if (currentResource == null) {
            return (new StopAction().apply());
        }

        switch (currentStep) {
            case NEXT_TILE:
                getCrewToUpdate().getMap().getTile(getCrewToUpdate().getCoordinates()).setExplored(true);
                nextStep = MOVE_TO;
                //need to check that the tile isn't explored
                Coordinates coordinates = PathFinder.findNearestTileOfResource(getCrewToUpdate().getMap(), getCrewToUpdate().getCoordinates(), currentResource);
                if (coordinates == null) {
                    for (RawResource rawResource : getCrewToUpdate().getWantedResources()) {
                        coordinates = PathFinder.findNearestTileOfResource(getCrewToUpdate().getMap(), getCrewToUpdate().getCoordinates(), rawResource);
                        if (coordinates != null) {
                            break;
                        }
                    }
                }
                if (coordinates == null) {
                    return new StopAction().apply();
                }
                moveTo = new MoveTo(getCrewToUpdate(), coordinates);
                break;

            case MOVE_TO:
                currentAction = moveTo;
                if (moveTo.isFinished()) {
                    nextStep = EXPLOIT_TILE;
                } else {
                    nextStep = MOVE_TO;
                    res = moveTo.apply();
                }
                break;

            case EXPLOIT_TILE:
                currentAction = exploitTile;
                if (exploitTile.isFinished()) {
                    nextStep = NEXT_TILE;
                    exploitTile.reset();
                } else {
                    nextStep = EXPLOIT_TILE;
                    res = exploitTile.apply();
                }
                break;

            default:
                throw new IllegalStateException("Unknown step : " + currentStep);
        }

        currentStep = nextStep;
        if (res == null || res.equals("")) {
            return this.apply();
        }
        return res;
    }

    @Override
    public String acknowledgeResults(String result) {
        return currentAction == null ? "" : currentAction.acknowledgeResults(result);
    }

    enum Step {
        NEXT_TILE,
        EXPLOIT_TILE,
        MOVE_TO,
    }
}
