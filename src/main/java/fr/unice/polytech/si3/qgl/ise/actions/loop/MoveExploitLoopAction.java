package fr.unice.polytech.si3.qgl.ise.actions.loop;

import fr.unice.polytech.si3.qgl.ise.RawContract;
import fr.unice.polytech.si3.qgl.ise.actions.CrewAction;
import fr.unice.polytech.si3.qgl.ise.actions.StopAction;
import fr.unice.polytech.si3.qgl.ise.actions.crew.ExploitTile;
import fr.unice.polytech.si3.qgl.ise.actions.crew.Move_to;
import fr.unice.polytech.si3.qgl.ise.entities.Crew;
import fr.unice.polytech.si3.qgl.ise.enums.RawResource;
import fr.unice.polytech.si3.qgl.ise.map.Coordinates;
import fr.unice.polytech.si3.qgl.ise.map.PathFinder;

import java.util.Optional;

import static fr.unice.polytech.si3.qgl.ise.actions.loop.MoveExploitLoopAction.Step.*;

public class MoveExploitLoopAction extends CrewAction {

    private ExploitTile exploitTile;
    private Move_to move_to;
    private RawResource currentResource;
    private CrewAction currentAction;
    private Step currentStep;

    public MoveExploitLoopAction(Crew crewToUpdate) {
        super(crewToUpdate);
        currentStep = NextTile;
        currentAction = null;
        currentResource = crewToUpdate.getCurrentResource();
        exploitTile = new ExploitTile(crewToUpdate, crewToUpdate.getCurrentResource());
    }

    @Override
    public String apply() {
        currentAction = null;
        String res = null;
        Step nextStep;
        if (getCrewToUpdate().getStock().containsKey(currentResource) && getCrewToUpdate().getStock().get(currentResource) >= getCrewToUpdate().getCurrentQuantity()) {
            exploitTile.reset();
            for (RawContract rawContract : getCrewToUpdate().getRawContracts()) {
                if (rawContract.getResource().equals(currentResource)) {
                    getCrewToUpdate().finishRawContract(rawContract);
                    break;
                } else {
                    if (getCrewToUpdate().getStock().containsKey(rawContract.getResource()) && getCrewToUpdate().getStock().get(rawContract.getResource()) >= rawContract.getQuantity()) {
                        getCrewToUpdate().finishRawContract(rawContract);
                    }
                }
            }
            getCrewToUpdate().setCurrentResource(null);
            Optional<RawContract> bestContract = getCrewToUpdate().choseBestRawContract();
            bestContract.ifPresent(rawContract -> getCrewToUpdate().setCurrentResource(rawContract.getResource()));
            bestContract.ifPresent(rawContract -> getCrewToUpdate().setCurrentQuantity(rawContract.getQuantity()));

            if (getCrewToUpdate().getCurrentResource() == null) {
                return (new StopAction().apply());
            }
            currentResource = getCrewToUpdate().getCurrentResource();
            currentStep = NextTile;
        } else {
            int size = getCrewToUpdate().getRawContracts().size();
            for (int x = 0; x < size; x++) {
                RawContract rawContract = getCrewToUpdate().getRawContracts().get(x);
                if (getCrewToUpdate().getStock().containsKey(rawContract.getResource()) && getCrewToUpdate().getStock().get(rawContract.getResource()) >= rawContract.getQuantity()) {
                    getCrewToUpdate().finishRawContract(rawContract);
                    x = x - 1;
                    size = size - 1;
                }
            }
        }
        /*for(RawContract rawContract : getCrewToUpdate().getRawContracts()){
            if(getCrewToUpdate().getStock().containsKey(rawContract.getResource()) && getCrewToUpdate().getStock().get(rawContract.getResource())>= rawContract.getQuantity()){
                getCrewToUpdate().finishRawContract(rawContract);
            }
        }*/


        switch (currentStep) {
            case NextTile:
                getCrewToUpdate().getMap().getTile(getCrewToUpdate().getCoords()).setExplored(true);
                nextStep = Move_to;
                Coordinates coordinates = PathFinder.findNearestTileOfResource(getCrewToUpdate().getMap(), getCrewToUpdate().getCoords(), currentResource);
                if (coordinates == null) {
                    for (RawResource rawResource : getCrewToUpdate().getWantedResources()) {
                        coordinates = PathFinder.findNearestTileOfResource(getCrewToUpdate().getMap(), getCrewToUpdate().getCoords(), rawResource);
                        if (coordinates != null) {
                            break;
                        }
                    }
                }
                if (coordinates == null) {
                    return new StopAction().apply();
                }
                move_to = new Move_to(getCrewToUpdate(), coordinates);
                break;

            case Move_to:
                currentAction = move_to;
                if (move_to.isFinished()) {
                    nextStep = ExploitTile;
                } else {
                    nextStep = Move_to;
                    res = move_to.apply();
                }
                break;

            case ExploitTile:
                currentAction = exploitTile;
                if (exploitTile.isFinished()) {
                    nextStep = NextTile;
                    exploitTile.reset();
                } else {
                    nextStep = ExploitTile;
                    res = exploitTile.apply();
                }
                break;

            default:
                throw new IllegalStateException("Unknown step : " + currentStep);
        }

        currentStep = nextStep;
        if (res == null || res.equals("")) {
            return this.apply();
        }
        return res;
    }

    @Override
    public String acknowledgeResults(String result) {
        return currentAction == null ? "" : currentAction.acknowledgeResults(result);
    }

    enum Step {
        NextTile,
        ExploitTile,
        Move_to,
    }
}
