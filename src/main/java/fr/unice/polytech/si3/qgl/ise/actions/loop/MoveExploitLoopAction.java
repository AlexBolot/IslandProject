package fr.unice.polytech.si3.qgl.ise.actions.loop;

import fr.unice.polytech.si3.qgl.ise.actions.CrewAction;
import fr.unice.polytech.si3.qgl.ise.actions.StopAction;
import fr.unice.polytech.si3.qgl.ise.actions.crew.ExploitTile;
import fr.unice.polytech.si3.qgl.ise.actions.crew.Move_to;
import fr.unice.polytech.si3.qgl.ise.entities.Crew;
import fr.unice.polytech.si3.qgl.ise.enums.RawResource;
import fr.unice.polytech.si3.qgl.ise.map.Coordinates;
import fr.unice.polytech.si3.qgl.ise.map.PathFinder;

import static fr.unice.polytech.si3.qgl.ise.actions.loop.MoveExploitLoopAction.Step.*;

public class MoveExploitLoopAction extends CrewAction {

    private ExploitTile exploitTile;
    private Move_to move_to;
    private RawResource currentResource;
    private CrewAction currentAction;
    private Step currentStep;

    public MoveExploitLoopAction(Crew crewToUpdate) {
        super(crewToUpdate);
        currentStep = NextTile;
        currentAction = null;
        currentResource = crewToUpdate.getCurrentResource();
        exploitTile = new ExploitTile(crewToUpdate, crewToUpdate.getCurrentResource());
    }

    @Override
    public String apply() {
        String res = null;
        Step nextStep;
        if (getCrewToUpdate().getStock().containsKey(currentResource) && getCrewToUpdate().getStock().get(currentResource) >= getCrewToUpdate().getCurrentQuantity()) {
            currentAction = null;
            return (new StopAction().apply());
        }
        switch (currentStep) {
            case NextTile:
                getCrewToUpdate().getMap().getTile(getCrewToUpdate().getCoords()).setExplored(true);
                nextStep = Move_to;
                //need to check that the tile isn't explored
                Coordinates coordinates = PathFinder.findNearestTileOfResource(getCrewToUpdate().getMap(), getCrewToUpdate().getCoords(), currentResource);
                move_to = new Move_to(getCrewToUpdate(), coordinates);
                break;

            case Move_to:
                currentAction = move_to;
                if (move_to.isFinished()) {
                    nextStep = ExploitTile;
                } else {
                    nextStep = Move_to;
                    res = move_to.apply();
                }
                break;

            case ExploitTile:
                currentAction = exploitTile;
                if (exploitTile.isFinished()) {
                    nextStep = NextTile;
                    exploitTile.reset();
                } else {
                    nextStep = ExploitTile;
                    res = exploitTile.apply();
                }
                break;

            default:
                throw new IllegalStateException("Unknown step : " + currentStep);
        }

        currentStep = nextStep;
        if (res == null || res.equals("")) {
            return this.apply();
        }
        return res;
    }

    @Override
    public String acknowledgeResults(String result) {
        return currentAction == null ? "" : currentAction.acknowledgeResults(result);
    }

    public void setCurrentResource(RawResource resource) {
        this.currentResource = resource;
        this.exploitTile = new ExploitTile(getCrewToUpdate(), resource);
    }

    enum Step {
        NextTile,
        ExploitTile,
        Move_to,
    }
}
