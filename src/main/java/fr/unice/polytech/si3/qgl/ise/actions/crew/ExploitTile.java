package fr.unice.polytech.si3.qgl.ise.actions.crew;

import fr.unice.polytech.si3.qgl.ise.actions.CrewAction;
import fr.unice.polytech.si3.qgl.ise.actions.StopAction;
import fr.unice.polytech.si3.qgl.ise.entities.Crew;
import fr.unice.polytech.si3.qgl.ise.enums.Abundance;
import fr.unice.polytech.si3.qgl.ise.enums.RawResource;
import fr.unice.polytech.si3.qgl.ise.map.Coordinates;
import fr.unice.polytech.si3.qgl.ise.map.PathFinder;

public class ExploitTile extends CrewAction
{
    private RawResource resource;
    private Step        currentStep;
    private Exploit     exploit;
    private Explore     explore;
    private CrewAction  toAcknowledge;

    public ExploitTile (Crew crewToUpdate, RawResource resource)
    {
        super(crewToUpdate);
        this.resource = resource;
        currentStep = Step.Explore;
        exploit = new Exploit(crewToUpdate, resource);
        explore = new Explore(crewToUpdate);
    }

    public String apply ()
    {
        String res;
        Step nextStep;

        switch (currentStep)
        {
            case Explore:
                res = explore.apply();

                toAcknowledge = explore;
                explore.reset();
                nextStep = Step.Exploit;
                break;

            case Exploit:
                if (!foundResource())
                {
                    this.finish();
                    res = null;
                    toAcknowledge = null;
                    nextStep = Step.Explore;
                    exploit.reset();
                    break;
                }

                if (keepExploiting())
                {
                    res = exploit.apply();
                    toAcknowledge = exploit;
                }
                else
                {
                    this.finish();
                    res = null;
                    toAcknowledge = null;
                }

                nextStep = Step.Explore;
                exploit.reset();
                break;

            default:
                throw new IllegalStateException("Unknown step : " + currentStep);
        }
        currentStep = nextStep;

        return res;
    }

    private boolean foundResource ()
    {
        Crew crew = getCrewToUpdate();
        return crew.getMap().getTile(crew.getCoords()).getResourcesStats().containsKey(resource);
    }

    private boolean keepExploiting ()
    {
        Crew crew = getCrewToUpdate();
        return (crew.getMap().getTile(crew.getCoords()).getResourcesStats().get(resource)._1 != Abundance.LOW);
    }

    public String acknowledgeResults (Crew crewToUpdate, String result)
    {
        return toAcknowledge == null ? "" : toAcknowledge.acknowledgeResults(crewToUpdate, result);
    }

    public enum Step
    {
        Exploit,
        Explore
    }

    @Override
    public void reset() {
        super.reset();
        currentStep = Step.Explore;
    }
}
