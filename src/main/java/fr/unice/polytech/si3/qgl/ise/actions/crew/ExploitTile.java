package fr.unice.polytech.si3.qgl.ise.actions.crew;

import fr.unice.polytech.si3.qgl.ise.actions.CrewAction;
import fr.unice.polytech.si3.qgl.ise.actions.StopAction;
import fr.unice.polytech.si3.qgl.ise.entities.Crew;
import fr.unice.polytech.si3.qgl.ise.enums.Abundance;
import fr.unice.polytech.si3.qgl.ise.enums.RawResource;

import java.util.HashMap;

public class ExploitTile extends CrewAction {

    private RawResource resource;
    private Step currentStep;
    private Exploit exploit;
    private Explore explore;
    private StopAction stopAction;

    public ExploitTile(Crew crewToUpdate, RawResource resource) {
        super(crewToUpdate);
        this.resource = resource;
        currentStep = Step.Explore;
        exploit = new Exploit(crewToUpdate, resource);
        explore = new Explore(crewToUpdate);
        stopAction = new StopAction();
    }

    public String apply() {
        String res;
        Step nextStep;

        switch (currentStep) {
            case Explore:
                res = explore.apply();
                nextStep = Step.Exploit;
                break;

            case Exploit:
                if (exploitOrStop()) {
                    res = exploit.apply();
                } else {
                    this.finish();
                    res = stopAction.apply();
                }
                nextStep = Step.Explore;
                break;

            default:
                throw new IllegalStateException("Unknown step : " + currentStep);
        }
        currentStep = nextStep;

        return res;
    }

    private boolean exploitOrStop() {
        HashMap<RawResource, Abundance> lastExplore = getCrewToUpdate().getLastExplore();
        if (lastExplore.get(getCrewToUpdate().getCurrentResource()).equals(Abundance.LOW)) {
            return false;
        }
        return true;
    }

    public String acknowledgeResults(Crew crewToUpdate, String result) {
        return "";
    }

    public enum Step {
        Exploit,
        Explore
    }
}
