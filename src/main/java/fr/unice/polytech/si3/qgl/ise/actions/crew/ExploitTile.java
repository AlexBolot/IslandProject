package fr.unice.polytech.si3.qgl.ise.actions.crew;

import fr.unice.polytech.si3.qgl.ise.actions.CrewAction;
import fr.unice.polytech.si3.qgl.ise.entities.Crew;
import fr.unice.polytech.si3.qgl.ise.enums.Abundance;
import fr.unice.polytech.si3.qgl.ise.enums.RawResource;

import java.util.EnumMap;
import java.util.List;
import java.util.Map;

public class ExploitTile extends CrewAction {
    private RawResource resource;
    private Step currentStep;
    private Exploit exploit;
    private Explore explore;
    private CrewAction toAcknowledge;
    private List<RawResource> wantedResources;
    private Map<RawResource, Integer> tileResources;

    public ExploitTile(Crew crewToUpdate, RawResource resource) {
        super(crewToUpdate);
        this.resource = resource;
        currentStep = Step.Explore;
        exploit = new Exploit(crewToUpdate, resource);
        explore = new Explore(crewToUpdate);
        wantedResources = getCrewToUpdate().getWantedResources();
    }

    public String apply() {
        wantedResources = getCrewToUpdate().getWantedResources();
        String res;
        Step nextStep;

        switch (currentStep) {
            case Explore:
                res = explore.apply();

                toAcknowledge = explore;
                explore.reset();
                nextStep = Step.Setup;
                break;

            case Setup:
                boolean nothingToExploit = true;
                res = null;
                nextStep = Step.Exploit;
                tileResources = new EnumMap<>(RawResource.class);
                for (RawResource raw : wantedResources) {
                    if (foundResource(raw) && getCrewToUpdate().getMap().getTile(getCrewToUpdate().getCoords()).getResourcesStats().get(raw)._1 != Abundance.LOW) {
                        tileResources.put(raw, 1);
                        nothingToExploit = false;
                    } else {
                        tileResources.put(raw, 0);
                    }
                }
                if (nothingToExploit) {
                    this.finish();
                    res = "";
                }
                break;

            case Exploit:
                toAcknowledge = exploit;
                res = null;
                nextStep = Step.Explore;
                //if (!foundResource(resource)) {
                //    this.finish();
                //    res = null;
                //    toAcknowledge = null;
                //    nextStep = Step.Explore;
                //    exploit.reset();
                //    break;
                //}

                //if (keepExploiting()) {
                //    res = exploit.apply();
                //    toAcknowledge = exploit;
                //} else {
                //    this.finish();
                //    res = null;
                //    toAcknowledge = null;
                //}

                for (RawResource raw : wantedResources) {
                    if (!tileResources.get(raw).equals(0)) {
                        int x = tileResources.get(raw);
                        tileResources.put(raw, x - 1);
                        exploit.setResource(raw);
                        res = exploit.apply();
                        nextStep = Step.Exploit;
                        break;
                    } else {
                        nextStep = Step.Explore;
                    }
                }
                exploit.reset();
                break;

            default:
                throw new IllegalStateException("Unknown step : " + currentStep);
        }
        currentStep = nextStep;

        if (res == null) {
            return this.apply();
        }
        return res;
    }

    private boolean foundResource(RawResource resource) {
        Crew crew = getCrewToUpdate();
        return crew.getMap().getTile(crew.getCoords()).getResourcesStats().containsKey(resource);
    }

    private boolean keepExploiting() {
        Crew crew = getCrewToUpdate();
        return (crew.getMap().getTile(crew.getCoords()).getResourcesStats().get(resource)._1 != Abundance.LOW);
    }

    public String acknowledgeResults(String result) {
        return toAcknowledge == null ? "" : toAcknowledge.acknowledgeResults(result);
    }

    @Override
    public void reset() {
        super.reset();
        currentStep = Step.Explore;
    }

    public enum Step {
        Exploit,
        Explore,
        Setup
    }
}
